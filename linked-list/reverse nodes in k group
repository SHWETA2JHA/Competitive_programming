/*
Reverse Nodes in k-Group

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
        ListNode *prev,*curr,*next;
        prev=NULL;
        curr=head,next=head;
        while(curr!=NULL)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL)return head;
        vector<int>v;
        ListNode* temp=head;
        while(temp!=NULL)
        {
            v.push_back(temp->val);
            temp=temp->next;
        }
        
        int i=0;
        
        ListNode* t=head;
        int n= v.size();
        if(k==n)return reverse(head);
        while(i<v.size())
        {
            
            if(i+k>=n)break;
            int j=i+k-1;
           //out<<i<<" "<<j<<endl;
            while(j!=i-1)
            {     //out<<j<<" ";
                if(t!=NULL)
                {
                    t->val=v[j];
                    t=t->next;
                }
                j--;
            }
            
            i+=k;
            //ut<<i<<endl;
        }
        if(i+k-1==n-1)
        {
            int p=n-1;
            while(p!=i-1){
                if(t!=NULL)
                {
                    t->val=v[p];
                    t=t->next;
                }
                p--;
            }     
        }
        return head;
    }
};
