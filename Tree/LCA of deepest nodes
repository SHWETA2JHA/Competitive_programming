/*
Lowest Common Ancestor of Deepest Leaves: Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.

Recall that:

The node of a binary tree is a leaf if and only if it has no children
The depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.
The lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.

Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored in yellow in the diagram.
The nodes coloured in blue are the deepest leaf-nodes of the tree.
Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.
 */
class Solution {
public:
    int height(TreeNode* root){
        if(root==NULL)return 0;
        int l=height(root->left);
        int r=height(root->right);
        return 1+max(l,r);
    }

    TreeNode* find(TreeNode* root, int h, int ht){
        if(root==NULL)return root;
        if(h==ht-1 && (root->left!=NULL && root->right!=NULL))return root;
        if(h==ht-1 && (root->left==NULL && root->right!=NULL))return root->right;
        if(h==ht-1 && (root->left!=NULL && root->right==NULL))return root->left;
        
        TreeNode* l=find(root->left,h+1,ht);
        TreeNode* r=find(root->right,h+1,ht);
        if(l==NULL){
            return r;
        }else if(r==NULL){
            return l;
        }else{
            return root;
        }
       
    }

    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        if(root==NULL || (root->left==NULL && root->right==NULL))return root;
        int ht=height(root);
        
        TreeNode* temp=find(root,0,ht-1);
         return temp;
    }
};
