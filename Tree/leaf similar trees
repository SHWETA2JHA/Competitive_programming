/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void f(TreeNode* root, vector<int>&v){
        if(root->left==NULL && root->right==NULL){
            v.push_back(root->val);
            cout<<root->val<<"  ";  
        }

        if(root->left!=NULL){
            f(root->left,v);
        }
        if(root->right!=NULL){
            f(root->right,v);
        }
        return;
    }

    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int>v1,v2;
        f(root1,v1);
        cout<<"\n";
        f(root2,v2);
        cout<<"\n";
        if(v1.size()!=v2.size())return false;

        for(int i=0;i<v1.size();i++){
            cout<<v1[i]<<"    "<<v2[i]<<"\n";
            if(v1[i]!=v2[i])return false;
        }
        return true;
    }
};
