/*
Remove Stones to Minimize the Total
You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times:

Choose any piles[i] and remove floor(piles[i] / 2) stones from it.
Notice that you can apply the operation on the same pile more than once.

Return the minimum possible total number of stones remaining after applying the k operations.

floor(x) is the greatest integer that is smaller than or equal to x (i.e., rounds x down).


Input: piles = [5,4,9], k = 2
Output: 12
Explanation: Steps of a possible scenario are:
- Apply the operation on pile 2. The resulting piles are [5,4,5].
- Apply the operation on pile 0. The resulting piles are [3,4,5].
The total number of stones in [3,4,5] is 12.


*/

class Solution {
public:
    int minStoneSum(vector<int>& piles, int k) {
        int s=0;int n=piles.size()-1;
        priority_queue<int>p;
        
        for(int i=0;i<=n;i++){
            p.push(piles[i]);
        }
        for(int i=0;i<k;i++){
            int k=p.top();
            p.pop();
            k-=floor(k/2);
            p.push(k);
        }
        for(int i=0;i<=n;i++){
            s+=p.top();
            p.pop();
        }
        return s;
    }
};
