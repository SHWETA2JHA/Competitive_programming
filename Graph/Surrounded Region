/*Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.*/



class Solution {
        int delrow[4]={-1,0,1,0};
    int delcol[4]={0,1,0,-1};
public:
void solve(vector<vector<char>>& mat) {
    int n=mat.size();
    int m=mat[0].size();
         vector<vector<int>> vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            if(mat[i][0]=='O'&&vis[i][0]==0)
            {
                dfs(i,0,mat,vis);
            }
              if(mat[i][m-1]=='O'&&vis[i][m-1]==0)
            dfs(i,m-1,mat,vis);
        }
        for(int i=0;i<m;i++)
        {
            if(mat[0][i]=='O'&&vis[0][i]==0)
            dfs(0,i,mat,vis);

            if(mat[n-1][i]=='O'&&vis[n-1][i]==0)
            dfs(n-1,i,mat,vis);
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(vis[i][j]==1)
                {
                    mat[i][j]='O';
                }
                else
                mat[i][j]='X';
            }
        }
       // return mat;
    }
      void dfs(int r,int c,vector<vector<char>> mat,vector<vector<int>>& vis)
    {
        int n=mat.size();
        int m=mat[0].size();
        vis[r][c]=1;
        for(int i=0;i<4;i++)
        {
            int row=r+delrow[i];
            int col=c+delcol[i];
            if(row>=0&&row<n&&col>=0&&col<m&&vis[row][col]==0&&mat[row][col]=='O')
            {
                dfs(row,col,mat,vis);
            }
        }
    }
};
