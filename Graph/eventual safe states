/*
Find Eventual Safe States
There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.

Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
Output: [4]
Explanation:
Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.


*/

class Solution {
public:

    bool dfs(int node, vector<vector<int>>& graph, vector<int>&vis,vector<int>&check, vector<int>&path){
        vis[node]=1;
        check[node]=0;
        path[node]=1;
        for(auto it: graph[node]){
            if(!vis[it]){
                if(dfs(it,graph,vis,check,path)==true)
                {
                    check[node]=0;
                    return true;
                }
            }
            else if(path[it]){
                    check[node]=0;
                    return true;
            }
        }
        check[node]=1;
        path[node]=0;
        return false;
    }
        
    

    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size()-1;
        vector<int>vis(n+1,0);
        vector<int>path(n+1,0);
        vector<int>check(n+1,0);

        for(int i=0;i<n+1;i++){
            if(!vis[i]){
                dfs(i,graph,vis,check,path);
            }
        }
        vector<int>safe;
        for(int i=0;i<n+1;i++){
            if(check[i]==1){
                safe.push_back(i);
            }
        }
        return safe;
    }
};
