class Solution {
    vector<int> dist;
public:
    int countRestrictedPaths(int n, vector<vector<int>>& edges) {
        vector<vector<pair<int,int>>> adj(n+1);
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
            adj[edges[i][1]].push_back({edges[i][0],edges[i][2]});
           
        }
        dist=shortestPath(n,adj,n+1);
        vector<vector<int>> graph(n+1);
        graph[0]={0};
        for(int i=0;i<edges.size();i++)
        {
            graph[edges[i][0]].push_back(edges[i][1]);
             graph[edges[i][1]].push_back(edges[i][0]);

        }
       vector<int> dp(n+1,-1);
       return dfs(graph,n,dp,dist);
        
    }
    int dfs(vector<vector<int>>& graph,int n,vector<int>& dp,vector<int>& dist)
    {
        int mod=1e9+7;
        if(n==1)
        return 1;
        if(dp[n]!=-1)
        return dp[n];
        int sum=0,w=0,v;
        for(auto& it:graph[n])
        {
            w=dist[n];
            v=dist[it];
            if(v>w)
            sum=(sum%mod+dfs(graph,it,dp,dist)%mod)%mod;
        }
        return dp[n]=sum%mod;
    }
    vector<int> shortestPath(int dest,vector<vector<pair<int,int>>>& graph,int n)
    {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> dist(n,INT_MAX);
        pq.push(make_pair(0,dest));
        dist[dest]=0;
        while(!pq.empty())
        {
            int u=pq.top().second;
            pq.pop();
            for(auto i=graph[u].begin();i!=graph[u].end();i++)
            {
                int v=(*i).first;
                int w=(*i).second;
                if(dist[v]>dist[u]+w)
                {
                    dist[v]=dist[u]+w;
                    pq.push(make_pair(dist[v],v));
                }
            }
        }
       return dist;
    }
  
  
};
